 from news.models import *

 1. Создать двух пользователей.

>>> user1 = User.objects.create_user(username='Иван')
>>> user2 = User.objects.create_user(username='Не Иван')
>>> user1
<User: Иван>
>>> user2
<User: Не Иван>

2. Создать два объекта модели Author, связанные с пользователями.

>>> Author.objects.create(authorUser=user1)
<Author: Author object (1)>
>>> Author.objects.create(authorUser=user2)
<Author: Author object (2)>

3. Добавить 4 категории в модель Category.

>>> Category.objects.create(name='АйТи')
<Category: Category object (1)>
>>> Category.objects.create(name='Бизнес')
<Category: Category object (2)>
>>> Category.objects.create(name='Политика')
<Category: Category object (3)>
>>> Category.objects.create(name='Юмор')
<Category: Category object (4)>

4. Добавить 2 статьи и 1 новость.

>>> author1 = Author.objects.get(id=1)
>>> author2 = Author.objects.get(id=2)
>>> Post.objects.create(author=author1, categoryType='NW', title='Это большая новость!', text='Здесь её большое описание!')
<Post: Post object (1)>
>>> Post.objects.create(author=author2, categoryType='AR', title='Это маленькая статья.', text='Здесь её не большое описание!')
<Post: Post object (2)>
>>> Post.objects.create(author=author2, categoryType='AR', title='Это статья по больше.', text='Здесь её среднее описание!')
<Post: Post object (3)>

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=2))
>>> Post.objects.get(id=1).postCategory.add(Category.objects.get(id=3))

>>> Post.objects.get(id=2).postCategory.add(Category.objects.get(id=1))

>>> Post.objects.get(id=3).postCategory.add(Category.objects.get(id=4))

6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

>>> post1 = Post.objects.get(id=1)
>>> post2 = Post.objects.get(id=2)
>>> post3 = Post.objects.get(id=3)

>>> Comment.objects.create(commentPost=post1, commentUser=author2.authorUser, text='Вот это новость!')
<Comment: Comment object (1)>
>>> Comment.objects.create(commentPost=post1, commentUser=author1.authorUser, text='Да я сам в шоке!')
<Comment: Comment object (2)>
>>> Comment.objects.create(commentPost=post2, commentUser=author1.authorUser, text='Эта статья про IT оч полезная!')
<Comment: Comment object (3)>
>>> Comment.objects.create(commentPost=post3, commentUser=author1.authorUser, text='Ха ха оч смешная статья)')
<Comment: Comment object (4)>

7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

>>> comment1 = Comment.objects.get(id=1)
>>> comment2 = Comment.objects.get(id=2)
>>> comment3 = Comment.objects.get(id=3)
>>> comment4 = Comment.objects.get(id=4)

>>> comment1.like()
>>> comment1.like()
>>> comment1.like()
>>> comment2.like()
>>> comment3.dislike()
>>> comment3.dislike()
>>> comment4.like()
>>> comment4.like()
>>> comment4.like()
>>> comment4.like()
>>> post1.dislike()
>>> post1.dislike()
>>> post2.like()
>>> post3.like()
>>> post3.like()

8. Обновить рейтинги пользователей.

>>> author1.update_rating()
>>> author1.ratingAuthor
-3

>>> author2.update_rating()
>>> author2.ratingAuthor
12

9.Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

>>> order = Author.objects.order_by('-ratingAuthor')
>>> for i in order:
...     i.authorUser.username
...     i.ratingAuthor
...
'Не Иван'
12
'Иван'
-3

10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

>>> post_rating = Post.objects.order_by('-rating')[:1]
>>> for i in post_rating:
...     i.dateCreation
...     i.author.authorUser.username
...     i.rating
...     i.title
...     i.text
...
datetime.datetime(2022, 12, 21, 18, 56, 19, 644649, tzinfo=datetime.timezone.utc)
'Не Иван'
2
'Это статья по больше.'
'Здесь её среднее описание!'

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

>>> comments = Comment.objects.filter(commentPost=post_rating)
>>> for i in comments:
...     i.dateCreation
...     i.commentUser
...     i.rating
...     i.text
...
datetime.datetime(2022, 12, 21, 19, 38, 44, 872407, tzinfo=datetime.timezone.utc)
<User: Иван>
4
'Ха ха оч смешная статья)'
>>>



